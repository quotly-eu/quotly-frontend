/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authorize
         * @description Authorize user with Discord
         *
         *     :return: JWT token
         */
        post: operations["authorize_v1_authorize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Quotes */
        get: operations["get_quotes_v1_quotes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Quote */
        post: operations["create_quote_v1_quotes_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Top Quotes */
        get: operations["get_top_quotes_v1_quotes_top_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Quote */
        get: operations["get_quote_v1_quotes__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Quote */
        delete: operations["delete_quote_v1_quotes__id__delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/saved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Is Quote Saved */
        get: operations["is_quote_saved_v1_quotes__id__saved_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Quote Reactions */
        get: operations["get_quote_reactions_v1_quotes__id__reactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Quote Comments */
        get: operations["get_quote_comments_v1_quotes__id__comments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/comments/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Quote Comment */
        post: operations["create_quote_comment_v1_quotes__id__comments_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/toggleReact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Quote Toggle React */
        post: operations["quote_toggle_react_v1_quotes__id__toggleReact_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotes/{id}/toggleSave": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Quote Toggle Save */
        post: operations["quote_toggle_save_v1_quotes__id__toggleSave_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users */
        get: operations["get_users_v1_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Me */
        get: operations["get_me_v1_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Me */
        delete: operations["delete_me_v1_users_me_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_v1_users__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{id}/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Quotes */
        get: operations["get_user_quotes_v1_users__id__quotes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{id}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Reactions */
        get: operations["get_user_reactions_v1_users__id__reactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Roles */
        get: operations["get_user_roles_v1_users__id__roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{id}/saved-quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Saved Quotes */
        get: operations["get_user_saved_quotes_v1_users__id__saved_quotes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Webhook */
        post: operations["create_webhook_v1_users_webhook_post"];
        /** Create Webhook */
        delete: operations["create_webhook_v1_users_webhook_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Webhooks */
        get: operations["get_webhooks_v1_users_me_webhooks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Roles */
        get: operations["get_roles_v1_roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Role */
        get: operations["get_role_v1_roles__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_authorize_v1_authorize_post */
        Body_authorize_v1_authorize_post: {
            /**
             * Code
             * @description Authorization code received from Discord
             */
            code: string;
        };
        /** Body_create_quote_comment_v1_quotes__id__comments_create_post */
        Body_create_quote_comment_v1_quotes__id__comments_create_post: {
            /**
             * Comment
             * @description Comment's text
             */
            comment: string;
            /**
             * Token
             * @description The JWT token from the current user
             */
            token: string;
        };
        /** Body_create_quote_v1_quotes_create_post */
        Body_create_quote_v1_quotes_create_post: {
            /**
             * Quote
             * @description The quote markdown text
             */
            quote: string;
            /**
             * Token
             * @description The JWT token from the current user
             */
            token: string;
            /**
             * Send Webhook
             * @description Send the quote to the Discord webhook
             * @default false
             */
            send_webhook: boolean;
        };
        /** Body_create_webhook_v1_users_webhook_delete */
        Body_create_webhook_v1_users_webhook_delete: {
            /**
             * Token
             * @description The JWT token
             */
            token: string;
            /**
             * Id
             * @description The webhook db identifier
             */
            id: number;
        };
        /** Body_create_webhook_v1_users_webhook_post */
        Body_create_webhook_v1_users_webhook_post: {
            /**
             * Code
             * @description The code response from discord
             */
            code: string;
        };
        /** Body_delete_me_v1_users_me_delete_delete */
        Body_delete_me_v1_users_me_delete_delete: {
            /**
             * Token
             * @description The JWT token
             */
            token: string;
        };
        /** Body_delete_quote_v1_quotes__id__delete_delete */
        Body_delete_quote_v1_quotes__id__delete_delete: {
            /**
             * Token
             * @description The JWT token from the current user
             */
            token: string;
        };
        /** Body_quote_toggle_react_v1_quotes__id__toggleReact_post */
        Body_quote_toggle_react_v1_quotes__id__toggleReact_post: {
            /**
             * Reaction Name
             * @description The reaction name
             * @enum {string}
             */
            reaction_name: "red-heart" | "thumbs-up" | "face-with-tears-of-joy" | "melting-face" | "skull";
            /**
             * Token
             * @description The JWT token from the current user
             */
            token: string;
        };
        /** Body_quote_toggle_save_v1_quotes__id__toggleSave_post */
        Body_quote_toggle_save_v1_quotes__id__toggleSave_post: {
            /**
             * Token
             * @description The JWT token from the current user
             */
            token: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Quote */
        Quote: {
            /**
             * Quote
             * @description The quote text
             */
            quote: string;
            /**
             * Quoteid
             * @description The quote identifier
             */
            quoteId: number;
            /**
             * Userid
             * @description The user identifier
             */
            userId: number;
            /**
             * Createdat
             * Format: date-time
             * @description The quote creation date
             * @default 2025-06-21T00:03:56.537984
             */
            createdAt: string;
            /**
             * Changedat
             * @description The quote last change date
             */
            changedAt?: string | null;
            /**
             * Deletedat
             * @description The quote deletion date
             */
            deletedAt?: string | null;
        };
        /** QuoteCommentSchema */
        QuoteCommentSchema: {
            /**
             * Commentid
             * @description The saved quote identifier
             */
            commentId: number;
            /**
             * Parent
             * @description The parent comment identifier
             */
            parent?: number | null;
            /**
             * Quoteid
             * @description The quote identifier
             */
            quoteId: number;
            /**
             * Comment
             * @description The comment text
             */
            comment: string;
            /**
             * Createdat
             * Format: date-time
             * @description The user's creation date
             */
            createdAt: string;
            /**
             * Updatedat
             * @description The user's last update date
             */
            updatedAt?: string | null;
            /**
             * Deletedat
             * @description The user's deletion date
             */
            deletedAt?: string | null;
            user?: components["schemas"]["User"] | null;
        };
        /** QuoteReaction */
        QuoteReaction: {
            /**
             * Reactionid
             * @description The reaction identifier
             */
            reactionId: number;
            /**
             * Userid
             * @description The user's identifier
             */
            userId: number;
            /**
             * Quoteid
             * @description The quote identifier
             */
            quoteId: string;
            /**
             * Reactionname
             * @description The reaction name
             */
            reactionName: string;
            /**
             * Createdat
             * Format: date-time
             * @description The user's creation date
             */
            createdAt: string;
        };
        /** QuoteReactionSchema */
        QuoteReactionSchema: {
            /**
             * Reactionname
             * @description The reaction name
             */
            reactionName: string;
            /**
             * Count
             * @description The reaction count
             * @default 0
             */
            count: number;
        };
        /** QuoteSchema */
        QuoteSchema: {
            /**
             * Quote
             * @description The quote text
             */
            quote?: string;
            /**
             * Quoteid
             * @description The quote identifier
             */
            quoteId: number;
            /**
             * Userid
             * @description The user identifier
             */
            userId: number;
            /**
             * Createdat
             * Format: date-time
             * @description The quote creation date
             * @default 2025-06-21T00:03:56.616555
             */
            createdAt: string;
            /**
             * Changedat
             * @description The quote last change date
             */
            changedAt?: string | null;
            /**
             * Deletedat
             * @description The quote deletion date
             */
            deletedAt?: string | null;
            /**
             * Issaved
             * @description The quote is saved by the user
             * @default false
             */
            isSaved: boolean | null;
            /**
             * Reaction
             * @description The user's reaction to the quote
             */
            reaction?: string | null;
            user?: components["schemas"]["User"] | null;
            /**
             * Reactions
             * @default []
             */
            reactions: components["schemas"]["QuoteReactionSchema"][];
        };
        /** Role */
        Role: {
            /**
             * Roleid
             * @description The role's identifier
             */
            roleId: number;
            /**
             * Name
             * @description The role's name
             */
            name: string;
            /**
             * Createdat
             * Format: date-time
             * @description The role's creation date
             */
            createdAt: string;
        };
        /** SavedQuoteSchema */
        SavedQuoteSchema: {
            /**
             * Savedid
             * @description The saved quote identifier
             */
            savedId: number;
            quote?: components["schemas"]["Quote"] | null;
            user?: components["schemas"]["User"] | null;
        };
        /** User */
        User: {
            /**
             * Userid
             * @description The user's identifier
             */
            userId?: number;
            /**
             * Discordid
             * @description The discord user's identifier
             */
            discordId: string;
            /**
             * Displayname
             * @description The user's name to display
             */
            displayName: string;
            /**
             * Avatarurl
             * @description The user's name to display
             * @default
             */
            avatarUrl: string;
            /**
             * Createdat
             * Format: date-time
             * @description The user's creation date
             * @default 2025-06-21T00:03:56.588311
             */
            createdAt: string;
            /**
             * Deletedat
             * @description The user's deletion date
             */
            deletedAt?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Webhook */
        Webhook: {
            /**
             * Id
             * @description The webhook db identifier
             */
            id?: number;
            /**
             * Userid
             * @description The user identifier
             */
            userId: number;
            /**
             * Webhookid
             * @description The webhook identifier
             */
            webhookId: string;
            /**
             * Webhooktoken
             * @description The webhook token
             */
            webhookToken: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    authorize_v1_authorize_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_authorize_v1_authorize_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quotes_v1_quotes_get: {
        parameters: {
            query?: {
                /** @description The page number to retrieve starting from 1 */
                page?: number;
                /** @description The number of items to retrieve */
                limit?: number;
                /** @description The search term to filter quotes by */
                search?: string;
                /** @description The order to sort the quotes by */
                sort?: "ascend" | "descend";
                /** @description The JWT token from the current user */
                token?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_quote_v1_quotes_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_create_quote_v1_quotes_create_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_top_quotes_v1_quotes_top_get: {
        parameters: {
            query?: {
                /** @description The number of top quotes to retrieve */
                limit?: number;
                /** @description The JWT token from the current user */
                token?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quote_v1_quotes__id__get: {
        parameters: {
            query?: {
                /** @description The JWT token from the current user */
                token?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_quote_v1_quotes__id__delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_delete_quote_v1_quotes__id__delete_delete"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    is_quote_saved_v1_quotes__id__saved_get: {
        parameters: {
            query: {
                /** @description The JWT token from the current user */
                token: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedQuoteSchema"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quote_reactions_v1_quotes__id__reactions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteReaction"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quote_comments_v1_quotes__id__comments_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteCommentSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_quote_comment_v1_quotes__id__comments_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_create_quote_comment_v1_quotes__id__comments_create_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteCommentSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    quote_toggle_react_v1_quotes__id__toggleReact_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_quote_toggle_react_v1_quotes__id__toggleReact_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    quote_toggle_save_v1_quotes__id__toggleSave_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_quote_toggle_save_v1_quotes__id__toggleSave_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_users_v1_users_get: {
        parameters: {
            query?: {
                /** @description The page number to retrieve starting from 1 */
                page?: number;
                /** @description The number of items to retrieve */
                limit?: number;
                /** @description The search term to filter users by */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_me_v1_users_me_get: {
        parameters: {
            query: {
                /** @description The JWT token */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_me_v1_users_me_delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_delete_me_v1_users_me_delete_delete"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_v1_users__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user or discord user identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_quotes_v1_users__id__quotes_get: {
        parameters: {
            query?: {
                /** @description The order to sort the quotes by */
                sort?: "ascend" | "descend";
                /** @description The JWT token */
                token?: string;
            };
            header?: never;
            path: {
                /** @description The user identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_reactions_v1_users__id__reactions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteReaction"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_roles_v1_users__id__roles_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_saved_quotes_v1_users__id__saved_quotes_get: {
        parameters: {
            query?: {
                /** @description The JWT token */
                token?: string;
            };
            header?: never;
            path: {
                /** @description The user identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_webhook_v1_users_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_create_webhook_v1_users_webhook_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_webhook_v1_users_webhook_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_create_webhook_v1_users_webhook_delete"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_webhooks_v1_users_me_webhooks_get: {
        parameters: {
            query: {
                /** @description The JWT token */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_roles_v1_roles_get: {
        parameters: {
            query?: {
                /** @description The page number to retrieve starting from 1 */
                page?: number;
                /** @description The number of items to retrieve */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_role_v1_roles__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
